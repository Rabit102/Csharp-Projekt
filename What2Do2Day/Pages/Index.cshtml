@page
@model What2Do2Day.Pages.IndexModel
@{
    ViewData["Title"] = "Anime Search";
}

<div class="container mx-auto p-6">
    <!-- Sidebar toggle button -->
    <button id="openSidebar" class="fixed top-4 left-4 z-50 p-2 bg-gray-800 text-white rounded-lg">☰</button>

    <!-- Sidebar with category dropdowns -->
    <div id="sidebar" class="fixed top-0 left-0 h-full w-0 bg-gray-900 text-white overflow-x-hidden transition-all duration-300 z-40">
        <div class="p-4">
            <h2 class="text-xl font-bold mb-4">Categories</h2>
            <ul>
                @foreach (var category in Model.Categories)
                {
                    <li class="mb-2">
                        <a href="#" class="block p-2 hover:bg-gray-700 rounded category-toggle" data-category="@category">@category</a>
                        <div class="category-dropdown hidden bg-gray-800 p-2 rounded mt-1">
                            @foreach (var anime in Model.AnimeList.Where(a => a.Category == category))
                            {
                                <div class="p-1 hover:bg-gray-700 text-sm">@anime.Title</div>
                            }
                        </div>
                    </li>
                }
            </ul>
            <form method="post" asp-page-handler="AddCategory" class="mt-4">
                <input type="text" name="newCategory" placeholder="New Category" class="w-full p-2 bg-gray-700 rounded text-white" />
                <button type="submit" class="mt-2 p-2 bg-blue-500 rounded w-full">Add</button>
            </form>
        </div>
    </div>

    <!-- Search bar -->
    <div class="mb-8">
        <input type="text" id="searchInput" placeholder="Search anime..." 
               class="w-full max-w-lg mx-auto block p-3 rounded-lg bg-gray-800 text-white border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" />
    </div>

    <!-- Anime grid -->
    <div id="animeGrid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-6">
        @foreach (var anime in Model.AnimeList)
        {
            <div class="anime-card group bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:scale-105 transition duration-300 cursor-pointer" 
                 data-title="@Uri.EscapeDataString(anime.Title)">
                <img src="@anime.CoverImage" alt="@anime.Title" class="w-full h-48 object-cover">
                <p class="p-3 text-center text-sm text-gray-200 group-hover:text-blue-400">@anime.Title</p>
            </div>
        }
    </div>

    <!-- Modal for anime details -->
    <div id="modalOverlay" class="fixed inset-0 bg-black bg-opacity-75 hidden flex items-center justify-center z-50">
        <div id="modalContent" class="bg-gray-900 p-6 rounded-lg max-w-lg w-full max-h-[80vh] overflow-y-auto">
            <h2 id="modalTitle" class="text-2xl font-bold mb-4 text-gray-100"></h2>
            <img id="modalImage" class="w-full max-h-64 object-contain rounded-lg mb-4" alt="" />
            <div class="mb-4">
                <h3 class="text-xl font-semibold text-gray-200">Trailer</h3>
                <iframe id="modalTrailer" width="100%" height="315" frameborder="0" allowfullscreen></iframe>
            </div>
            <div class="mb-4">
                <h3 class="text-xl font-semibold text-gray-200">Description</h3>
                <p id="modalDescription" class="text-gray-300"></p>
            </div>
            <div class="mb-4">
                <h3 class="text-xl font-semibold text-gray-200">Genres</h3>
                <select id="modalGenres" class="w-full p-2 bg-gray-700 text-white rounded-lg"></select>
            </div>
            <div class="mb-4">
                <h3 class="text-xl font-semibold text-gray-200">Rating</h3>
                <div id="modalRating" class="flex text-yellow-400"></div>
            </div>
            <form method="post" asp-page-handler="AddAnimeToCategory" class="mt-4">
                <input type="hidden" name="animeTitle" id="modalAnimeTitle" />
                <select name="category" class="w-full p-2 bg-gray-700 rounded text-white mb-2">
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
                <button type="submit" class="p-2 bg-blue-500 rounded w-full">Add to Category</button>
            </form>
        </div>
    </div>
</div>

<script>
    // DOM elements
    const openSidebarBtn = document.getElementById('openSidebar');
    const sidebar = document.getElementById('sidebar');
    const searchInput = document.getElementById('searchInput');
    const animeGrid = document.getElementById('animeGrid');
    const modalOverlay = document.getElementById('modalOverlay');
    let allAnime = @Html.Raw(Json.Serialize(Model.AnimeList));

    // Toggle sidebar
    openSidebarBtn.addEventListener('click', () => {
        sidebar.style.width = sidebar.style.width === '250px' ? '0' : '250px';
    });

    // Toggle category dropdowns
    document.querySelectorAll('.category-toggle').forEach(toggle => {
        toggle.addEventListener('click', (e) => {
            e.preventDefault();
            const dropdown = toggle.nextElementSibling;
            // Hide all other dropdowns
            document.querySelectorAll('.category-dropdown').forEach(d => {
                if (d !== dropdown) d.classList.add('hidden');
            });
            // Toggle the clicked dropdown
            dropdown.classList.toggle('hidden');
        });
    });

    // Debounce function for search
    const debounce = (func, wait) => {
        let timeout;
        return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    };

    // Update anime grid based on search
    const updateGrid = debounce(async () => {
        const query = searchInput.value.trim().toLowerCase();
        let filteredAnime = query.length > 0
            ? (await fetch(`/api/Anime/details?title=${encodeURIComponent(query)}`)
                .then(r => r.json())
                .then(anime => anime.title === "Not Found" ? [] : [anime]))
            : allAnime;

        animeGrid.innerHTML = filteredAnime.map(anime => `
            <div class="anime-card group bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:scale-105 transition duration-300 cursor-pointer" 
                 data-title="${encodeURIComponent(anime.title)}">
                <img src="${anime.coverImage}" alt="${anime.title}" class="w-full h-48 object-cover">
                <p class="p-3 text-center text-sm text-gray-200 group-hover:text-blue-400">${anime.title}</p>
            </div>
        `).join('');
        attachClickHandlers();
    }, 300);

    // Attach click handlers to anime cards
    function attachClickHandlers() {
        document.querySelectorAll('.anime-card').forEach(card => {
            card.addEventListener('click', () => showDetails(card.getAttribute('data-title')));
        });
    }

    // Show anime details in modal
    async function showDetails(encodedTitle) {
        const title = decodeURIComponent(encodedTitle);
        const data = await fetch(`/api/Anime/details?title=${encodeURIComponent(title)}`).then(r => r.json());

        document.getElementById('modalTitle').textContent = data.title;
        document.getElementById('modalImage').src = data.coverImage;
        document.getElementById('modalTrailer').src = data.trailerUrl || ''; // Use embed URL directly
        document.getElementById('modalDescription').textContent = data.description || 'No description';
        document.getElementById('modalGenres').innerHTML = (data.genres || []).map(g => `<option>${g}</option>`).join('');
        document.getElementById('modalAnimeTitle').value = data.title;

        const rating = Math.floor(data.rating / 20);
        document.getElementById('modalRating').innerHTML = Array(5).fill()
            .map((_, i) => `<span class="text-2xl">${i < rating ? '★' : '☆'}</span>`).join('');

        modalOverlay.classList.remove('hidden');
    }

    // Close modal when clicking outside
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
            modalOverlay.classList.add('hidden');
            document.getElementById('modalTrailer').src = '';
        }
    });

    // Initial setup
    searchInput.addEventListener('input', updateGrid);
    attachClickHandlers();
</script>